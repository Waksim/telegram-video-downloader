═══════════════════════════════════════════════════════════════════════════════
📤 КОМАНДЫ ДЛЯ ПУБЛИКАЦИИ НА GITHUB
═══════════════════════════════════════════════════════════════════════════════

1. Создайте репозиторий на GitHub:
   https://github.com/new
   Название: telegram-video-downloader
   ❌ НЕ инициализируйте с README!

2. Выполните эти команды (ЗАМЕНИТЕ YOUR_USERNAME!):

cd /Users/mk/PycharmProjects/download_interview
git init
git add .
git commit -m "Initial commit: Telegram video downloader with resume capability"
git branch -M main
git remote add origin https://github.com/YOUR_USERNAME/telegram-video-downloader.git
git push -u origin main

3. После публикации обновите YOUR_USERNAME в README.md и DEPLOYMENT.md:

nano README.md
nano DEPLOYMENT.md
git add README.md DEPLOYMENT.md
git commit -m "Update repository URLs"
git push

═══════════════════════════════════════════════════════════════════════════════
🚀 КОМАНДЫ ДЛЯ ДЕПЛОЯ НА UBUNTU СЕРВЕР
═══════════════════════════════════════════════════════════════════════════════

ВАРИАНТ 1: АВТОМАТИЧЕСКАЯ УСТАНОВКА
────────────────────────────────────────────────────────────────────────────────
wget https://raw.githubusercontent.com/YOUR_USERNAME/telegram-video-downloader/main/install.sh
chmod +x install.sh
./install.sh


ВАРИАНТ 2: РУЧНАЯ УСТАНОВКА
────────────────────────────────────────────────────────────────────────────────
# Обновление системы
sudo apt update && sudo apt upgrade -y

# Установка зависимостей
sudo apt install python3 python3-pip python3-venv git -y

# Клонирование проекта (ЗАМЕНИТЕ YOUR_USERNAME!)
cd ~
git clone https://github.com/YOUR_USERNAME/telegram-video-downloader.git
cd telegram-video-downloader

# Создание виртуального окружения
python3 -m venv venv
source venv/bin/activate

# Установка Python пакетов
pip install -r requirements.txt

# Настройка .env
cp .env.example .env
nano .env
# Вставьте:
# API_ID=ваш_api_id
# API_HASH=ваш_api_hash
# SESSION_STRING=ваша_session_строка
# Сохраните: Ctrl+O, Enter, Ctrl+X

# Настройка параметров (опционально)
nano download_videos.py
# Измените CHAT_ID и TOPIC_ID если нужно

# Тестовый запуск
python download_videos.py


ВАРИАНТ 3: SYSTEMD SERVICE (АВТОЗАПУСК)
────────────────────────────────────────────────────────────────────────────────
# После ручной установки создайте service:

sudo nano /etc/systemd/system/telegram-downloader.service

# Вставьте (ЗАМЕНИТЕ mk на ваш username Ubuntu!):

[Unit]
Description=Telegram Video Downloader
After=network.target

[Service]
Type=simple
User=mk
WorkingDirectory=/home/mk/telegram-video-downloader
Environment="PATH=/home/mk/telegram-video-downloader/venv/bin"
ExecStart=/home/mk/telegram-video-downloader/venv/bin/python download_videos.py
Restart=on-failure
RestartSec=10

[Install]
WantedBy=multi-user.target

# Сохраните: Ctrl+O, Enter, Ctrl+X

# Активируйте сервис:
sudo systemctl daemon-reload
sudo systemctl enable telegram-downloader
sudo systemctl start telegram-downloader

# Проверьте статус:
sudo systemctl status telegram-downloader

# Логи:
sudo journalctl -u telegram-downloader -f


ВАРИАНТ 4: SCREEN (ПРОСТАЯ АЛЬТЕРНАТИВА)
────────────────────────────────────────────────────────────────────────────────
# Установка screen
sudo apt install screen -y

# Запуск в screen
screen -S downloader
cd ~/telegram-video-downloader
source venv/bin/activate
python download_videos.py

# Отключиться от screen (скрипт продолжит работать):
# Нажмите: Ctrl+A, затем D

# Вернуться к сессии:
screen -r downloader


═══════════════════════════════════════════════════════════════════════════════
🔧 УПРАВЛЕНИЕ НА СЕРВЕРЕ
═══════════════════════════════════════════════════════════════════════════════

SYSTEMD КОМАНДЫ:
sudo systemctl start telegram-downloader      # Запуск
sudo systemctl stop telegram-downloader       # Остановка
sudo systemctl restart telegram-downloader    # Перезапуск
sudo systemctl status telegram-downloader     # Статус
sudo systemctl enable telegram-downloader     # Автозапуск при старте системы
sudo systemctl disable telegram-downloader    # Отключить автозапуск
sudo journalctl -u telegram-downloader -f     # Логи в реальном времени
sudo journalctl -u telegram-downloader -n 50  # Последние 50 строк логов

МОНИТОРИНГ:
cat ~/telegram-video-downloader/download_progress.json      # Прогресс
ls -1 ~/telegram-video-downloader/downloaded_videos | wc -l # Количество видео
du -sh ~/telegram-video-downloader/downloaded_videos        # Размер папки
df -h                                                       # Свободное место
ps aux | grep download_videos                               # Проверка процесса

ОЧИСТКА:
rm ~/telegram-video-downloader/download_progress.json       # Сбросить прогресс
rm -rf ~/telegram-video-downloader/downloaded_videos/*      # Удалить все видео


═══════════════════════════════════════════════════════════════════════════════
📝 GIT КОМАНДЫ ДЛЯ ОБНОВЛЕНИЯ
═══════════════════════════════════════════════════════════════════════════════

# Добавить изменения
git add .

# Создать коммит
git commit -m "Описание изменений"

# Отправить на GitHub
git push

# Проверить статус
git status

# Посмотреть историю
git log --oneline

# Обновить код на сервере
cd ~/telegram-video-downloader
git pull origin main
source venv/bin/activate
pip install -r requirements.txt --upgrade


═══════════════════════════════════════════════════════════════════════════════
🔐 БЕЗОПАСНОСТЬ
═══════════════════════════════════════════════════════════════════════════════

# Защита .env файла
chmod 600 .env

# Проверка что .env НЕ в git
git status | grep .env

# Если .env случайно добавлен:
git rm --cached .env
git commit -m "Remove .env from tracking"
git push
# ⚠️ ЗАТЕМ СМЕНИТЕ ВСЕ КЛЮЧИ API!


═══════════════════════════════════════════════════════════════════════════════
❓ РЕШЕНИЕ ПРОБЛЕМ
═══════════════════════════════════════════════════════════════════════════════

"Permission denied":
  chmod +x install.sh
  chmod +x download_videos.py

"Module not found":
  source venv/bin/activate
  pip install -r requirements.txt

"Session not authorized":
  # Проверьте SESSION_STRING в .env
  nano .env

Недостаточно места:
  df -h
  sudo apt clean
  sudo apt autoremove -y

Скрипт не запускается:
  # Проверьте логи
  sudo journalctl -u telegram-downloader -n 100


═══════════════════════════════════════════════════════════════════════════════
✅ ЧЕКЛИСТ ДЕПЛОЯ
═══════════════════════════════════════════════════════════════════════════════

ЛОКАЛЬНО:
☐ Создал репозиторий на GitHub
☐ Выполнил git init, git add, git commit
☐ Выполнил git push
☐ Обновил YOUR_USERNAME в документации

НА СЕРВЕРЕ:
☐ Подключился к Ubuntu серверу
☐ Установил через install.sh или вручную
☐ Создал и настроил .env
☐ Настроил CHAT_ID и TOPIC_ID
☐ Запустил тестовое скачивание
☐ Настроил systemd или screen
☐ Проверил что всё работает
☐ Настроил мониторинг

═══════════════════════════════════════════════════════════════════════════════
📚 ДОКУМЕНТАЦИЯ
═══════════════════════════════════════════════════════════════════════════════

README.md         - Основная документация
DEPLOYMENT.md     - Подробная инструкция по деплою
PUBLISH.md        - Подробная инструкция по публикации
QUICK_START.md    - Быстрый старт
COMMANDS.txt      - Этот файл (все команды)

═══════════════════════════════════════════════════════════════════════════════

Удачи! 🚀
