"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ –∏–∑ Telegram —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Google Drive.
"""
import os
import sys
import json
import asyncio
import tempfile
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Optional
from telethon import TelegramClient
from telethon.sessions import StringSession
from telethon.tl.types import MessageMediaDocument, MessageMediaPhoto
from dotenv import load_dotenv
from google_drive_uploader import GoogleDriveUploader

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_ID = int(os.getenv('API_ID'))
API_HASH = os.getenv('API_HASH')
SESSION_STRING = os.getenv('SESSION_STRING')

# –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤
CHANNELS_CONFIG_FILE = 'channels_config.json'

# –§–∞–π–ª –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
PROGRESS_FILE = 'download_progress.json'


class ChannelConfig:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∫–∞–Ω–∞–ª–æ–≤."""

    def __init__(self, config_file: str):
        self.config_file = config_file
        self.channels = []
        self.load_config()

    def load_config(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞."""
        if os.path.exists(self.config_file):
            try:
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.channels = data.get('channels', [])
                    print(f"‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {len(self.channels)} –∫–∞–Ω–∞–ª–æ–≤")
            except Exception as e:
                print(f"‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
                self.channels = []
        else:
            print(f"‚ö† –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {self.config_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")

    def save_config(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª."""
        try:
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump({
                    'channels': self.channels
                }, f, indent=2, ensure_ascii=False)
            print(f"‚úì –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

    def add_channel(self, chat_id: int, topic_id: int, folder_path: str, description: str = ""):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        for channel in self.channels:
            if channel['chat_id'] == chat_id and channel['topic_id'] == topic_id:
                print(f"‚ö† –ö–∞–Ω–∞–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                return False

        self.channels.append({
            'chat_id': chat_id,
            'topic_id': topic_id,
            'folder_path': folder_path,
            'description': description
        })
        self.save_config()
        return True


class DownloadProgress:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è."""

    def __init__(self, progress_file: str):
        self.progress_file = progress_file
        self.downloaded_ids = {}  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ —Å–ª–æ–≤–∞—Ä—å {channel_key: set(message_ids)}
        self.load_progress()

    def load_progress(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–∑ —Ñ–∞–π–ª–∞."""
        if os.path.exists(self.progress_file):
            try:
                with open(self.progress_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å —Å –º–Ω–æ–∂–µ—Å—Ç–≤–∞–º–∏
                    self.downloaded_ids = {
                        key: set(ids) for key, ids in data.get('downloaded_ids', {}).items()
                    }
                    total = sum(len(ids) for ids in self.downloaded_ids.values())
                    print(f"‚úì –ó–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å: {total} —Ñ–∞–π–ª–æ–≤ —É–∂–µ —Å–∫–∞—á–∞–Ω–æ")
            except Exception as e:
                print(f"‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
                self.downloaded_ids = {}
        else:
            print("‚Ñπ –§–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω–∞—á–∞–ª–∞")

    def save_progress(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ñ–∞–π–ª."""
        try:
            with open(self.progress_file, 'w', encoding='utf-8') as f:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –≤ —Å–ø–∏—Å–∫–∏ –¥–ª—è JSON
                data_to_save = {
                    key: list(ids) for key, ids in self.downloaded_ids.items()
                }
                json.dump({
                    'downloaded_ids': data_to_save,
                    'last_update': datetime.now().isoformat()
                }, f, indent=2, ensure_ascii=False)
        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")

    def get_channel_key(self, chat_id: int, topic_id: int) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–∞–Ω–∞–ª–∞."""
        return f"{chat_id}_{topic_id}"

    def is_downloaded(self, chat_id: int, topic_id: int, message_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ —É–∂–µ —Å–∫–∞—á–∞–Ω —Ñ–∞–π–ª."""
        channel_key = self.get_channel_key(chat_id, topic_id)
        return message_id in self.downloaded_ids.get(channel_key, set())

    def mark_downloaded(self, chat_id: int, topic_id: int, message_id: int):
        """–û—Ç–º–µ—á–∞–µ—Ç —Ñ–∞–π–ª –∫–∞–∫ —Å–∫–∞—á–∞–Ω–Ω—ã–π."""
        channel_key = self.get_channel_key(chat_id, topic_id)
        if channel_key not in self.downloaded_ids:
            self.downloaded_ids[channel_key] = set()
        self.downloaded_ids[channel_key].add(message_id)
        self.save_progress()


async def download_channel_videos(client, chat_id: int, topic_id: int,
                                  folder_path: str, progress: DownloadProgress,
                                  drive_uploader: GoogleDriveUploader) -> Dict:
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ –∏–∑ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    """
    print(f"\n{'='*60}")
    print(f"üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–Ω–∞–ª–∞: {folder_path}")
    print(f"   Chat ID: {chat_id}, Topic ID: {topic_id}")

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
    try:
        chat = await client.get_entity(chat_id)
        print(f"‚úì –ù–∞–π–¥–µ–Ω —á–∞—Ç: {getattr(chat, 'title', 'Unknown')}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–∞: {e}")
        return {'video_count': 0, 'downloaded': 0, 'skipped': 0}

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞–ø–∫—É –Ω–∞ Google Drive
    drive_uploader.set_folder(folder_path)

    video_count = 0
    skipped_count = 0
    downloaded_count = 0

    # –ò—Ç–µ—Ä–∏—Ä—É–µ–º –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º –≤ —Ç–æ–ø–∏–∫–µ
    async for message in client.iter_messages(
        chat_id,
        reply_to=topic_id,
        reverse=True
    ):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∏–¥–µ–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if message.video or (message.media and isinstance(message.media, MessageMediaDocument)):
            is_video = False

            if message.video:
                is_video = True
            elif hasattr(message.media, 'document'):
                mime_type = message.media.document.mime_type
                is_video = mime_type and mime_type.startswith('video/')

            if is_video:
                video_count += 1

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ —Å–∫–∞—á–∞–Ω
                if progress.is_downloaded(chat_id, topic_id, message.id):
                    skipped_count += 1
                    print(f"‚è≠ [{video_count}] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ (ID: {message.id})")
                    continue

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                filename = f"video_{message.id}"
                if message.file and message.file.ext:
                    filename += message.file.ext
                else:
                    filename += ".mp4"

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME-—Ç–∏–ø
                mime_type = 'video/mp4'
                if message.video:
                    mime_type = message.video.mime_type or 'video/mp4'
                elif hasattr(message.media, 'document'):
                    mime_type = message.media.document.mime_type or 'video/mp4'

                # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ Google Drive
                try:
                    print(f"\nüì• [{video_count}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ (ID: {message.id})...")
                    print(f"   –î–∞—Ç–∞: {message.date}")
                    file_size_mb = 0
                    if message.file:
                        file_size_mb = message.file.size / (1024*1024)
                        print(f"   –†–∞–∑–º–µ—Ä: {file_size_mb:.2f} MB")

                    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    with tempfile.NamedTemporaryFile(delete=False, suffix=filename[filename.rfind('.'):]) as temp_file:
                        temp_filepath = temp_file.name

                    try:
                        # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                        await message.download_media(file=temp_filepath)

                        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ Google Drive
                        drive_uploader.upload_to_folder(
                            filepath=temp_filepath,
                            filename=filename,
                            mime_type=mime_type,
                            file_size_mb=file_size_mb
                        )

                        progress.mark_downloaded(chat_id, topic_id, message.id)
                        downloaded_count += 1

                        print(f"‚úì –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ Google Drive")

                    finally:
                        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                        if os.path.exists(temp_filepath):
                            os.remove(temp_filepath)

                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ (ID: {message.id}): {e}")

    return {
        'video_count': video_count,
        'downloaded': downloaded_count,
        'skipped': skipped_count
    }


async def download_videos():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Google Drive."""

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–∞–Ω–∞–ª–æ–≤
    config = ChannelConfig(CHANNELS_CONFIG_FILE)

    if not config.channels:
        print("‚ùå –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –î–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª—ã –≤ channels_config.json")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —Å —Å–µ—Å—Å–∏–µ–π –∏–∑ —Å—Ç—Ä–æ–∫–∏
    client = TelegramClient(StringSession(SESSION_STRING), API_ID, API_HASH)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    progress = DownloadProgress(PROGRESS_FILE)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Drive
    try:
        drive_uploader = GoogleDriveUploader()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Drive: {e}")
        return

    try:
        await client.connect()

        if not await client.is_user_authorized():
            print("‚ùå –û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞")
            return

        print("‚úì –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Telegram")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫–∞–Ω–∞–ª
        total_stats = {'video_count': 0, 'downloaded': 0, 'skipped': 0}

        for channel in config.channels:
            stats = await download_channel_videos(
                client=client,
                chat_id=channel['chat_id'],
                topic_id=channel['topic_id'],
                folder_path=channel['folder_path'],
                progress=progress,
                drive_uploader=drive_uploader
            )

            total_stats['video_count'] += stats['video_count']
            total_stats['downloaded'] += stats['downloaded']
            total_stats['skipped'] += stats['skipped']

        print(f"\n{'='*60}")
        print(f"‚úì –í—Å–µ –∫–∞–Ω–∞–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
        print(f"  –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ: {total_stats['video_count']}")
        print(f"  –ó–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ Google Drive –≤ —ç—Ç–æ—Ç —Ä–∞–∑: {total_stats['downloaded']}")
        print(f"  –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ –±—ã–ª–∏): {total_stats['skipped']}")
        print(f"{'='*60}")

    except KeyboardInterrupt:
        print("\n\n‚ö† –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        print(f"‚úì –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        await client.disconnect()


def parse_telegram_url(url: str) -> Optional[Dict]:
    """
    –ü–∞—Ä—Å–∏—Ç Telegram URL –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç chat_id –∏ topic_id.

    Args:
        url: URL –≤–∏–¥–∞ https://t.me/c/2406265529/8/602

    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å chat_id –∏ topic_id –∏–ª–∏ None
    """
    import re

    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤: https://t.me/c/CHAT_ID/TOPIC_ID/...
    pattern = r't\.me/c/(\d+)/(\d+)'
    match = re.search(pattern, url)

    if match:
        chat_id_without_prefix = int(match.group(1))
        topic_id = int(match.group(2))

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å -100 –∫ chat_id
        chat_id = -1000000000000 - chat_id_without_prefix

        return {
            'chat_id': chat_id,
            'topic_id': topic_id
        }

    return None


def add_channel_command(url: str, folder_name: str):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é."""
    print("="*60)
    print("üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞")
    print("="*60)

    # –ü–∞—Ä—Å–∏–º URL
    parsed = parse_telegram_url(url)
    if not parsed:
        print(f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL. –û–∂–∏–¥–∞–µ—Ç—Å—è: https://t.me/c/CHAT_ID/TOPIC_ID/...")
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = ChannelConfig(CHANNELS_CONFIG_FILE)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ
    folder_path = f"–°–æ–±–µ—Å—ã/{folder_name}"

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª
    if config.add_channel(
        chat_id=parsed['chat_id'],
        topic_id=parsed['topic_id'],
        folder_path=folder_path,
        description=folder_name
    ):
        print(f"‚úì –ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        print(f"  URL: {url}")
        print(f"  Chat ID: {parsed['chat_id']}")
        print(f"  Topic ID: {parsed['topic_id']}")
        print(f"  –ü–∞–ø–∫–∞: {folder_path}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª")


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
    if len(sys.argv) == 3:
        # –§–æ—Ä–º–∞—Ç: python download_videos.py URL FOLDER_NAME
        url = sys.argv[1]
        folder_name = sys.argv[2]
        add_channel_command(url, folder_name)
        return

    print("="*60)
    print("üìπ –ó–∞–≥—Ä—É–∑—á–∏–∫ –≤–∏–¥–µ–æ –∏–∑ Telegram –Ω–∞ Google Drive")
    print("="*60)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if not API_ID or not API_HASH or not SESSION_STRING:
        print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –∑–∞–¥–∞–Ω—ã API_ID, API_HASH –∏–ª–∏ SESSION_STRING")
        print("   –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example")
        return

    # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    asyncio.run(download_videos())


if __name__ == '__main__':
    main()
